<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sageassistant.dao.FinancialMapper">
	<!--Open L2 Cache under Names pace: 1 Hour -->
	<cache eviction="FIFO" flushInterval="3600000" readOnly="true" size="1024" />
	
	<select id="findAccoutBalanceByAccountNO" resultType="sageassistant.model.FinancialBalance">
		SELECT
		    T1.AccountNO,
			T1.Currency, 
			T1.Year,
			D0-C0 AS B0,
			D0+D1-C0-C1 AS B1,
			D0+D1+D2-C0-C1-C2 AS B2,
			D0+D1+D2+D3-C0-C1-C2-C3 AS B3,
			D0+D1+D2+D3+D4-C0-C1-C2-C3-C4 AS B4,
			D0+D1+D2+D3+D4+D5-C0-C1-C2-C3-C4-C5 AS B5,
			D0+D1+D2+D3+D4+D5+D6-C0-C1-C2-C3-C4-C5-C6 AS B6,
			D0+D1+D2+D3+D4+D5+D6+D7-C0-C1-C2-C3-C4-C5-C6-C7 AS B7,
			D0+D1+D2+D3+D4+D5+D6+D7+D8-C0-C1-C2-C3-C4-C5-C6-C7-C8 AS B8,
			D0+D1+D2+D3+D4+D5+D6+D7+D8+D9-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9 AS B9,
			D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10 AS B10,
			D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10+D11-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10-C11 AS B11,
			D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10+D11+D12-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10-C11-C12 AS B12,
			D0-C0 AS M0,
			D1-C1 AS M1,
			D2-C2 AS M2,
			D3-C3 AS M3,
			D4-C4 AS M4,
			D5-C5 AS M5,
			D6-C6 AS M6,
			D7-C7 AS M7,
			D8-C8 AS M8,
			D9-C9 AS M9,
			D10-C10 AS M10,
			D11-C11 AS M11,
			D12-C12 AS M12,
			T1.C0,
			T1.C1,
			T1.C2,
			T1.C3,
			T1.C4,
			T1.C5,
			T1.C6,
			T1.C7,
			T1.C8,
			T1.C9,
			T1.C10,
			T1.C11,
			T1.C12,
			T1.D0,
			T1.D1,
			T1.D2,
			T1.D3,
			T1.D4,
			T1.D5,
			T1.D6,
			T1.D7,
			T1.D8,
			T1.D9,
			T1.D10,
			T1.D11,
			T1.D12
		FROM (
		SELECT DISTINCT
		        BALANCE.ACC_0 AS AccountNO,
				BALANCE.CUR_0 AS Currency,
				FISCALYEAR.DESSHO_0 AS Year,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_0) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D0,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_0) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C0,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_1) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D1,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_1) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C1,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_2) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D2,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_2) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C2,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_3) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D3,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_3) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C3,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_4) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D4,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_4) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C4,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_5) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D5,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_5) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C5,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_6) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D6,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_6) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C6,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_7) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D7,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_7) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C7,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_8) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D8,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_8) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C8,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_9) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D9,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_9) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C9,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_10) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D10,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_10) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C10,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_11) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D11,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_11) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C11,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_12) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D12,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_12) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C12
		FROM BALANCE
		INNER JOIN FISCALYEAR 
				ON FISCALYEAR.FIYNUM_0 = BALANCE.FIY_0 
					AND BALANCE.CPY_0 = FISCALYEAR.CPY_0 
					AND BALANCE.LEDTYP_0 = FISCALYEAR.LEDTYP_0 
		WHERE 
			BALANCE.FCY_0=#{Site} 
				AND BALANCE.BPR_0=''
				<if test = "AccountNOs.length ==1 ">
				AND BALANCE.ACC_0 = 
					<foreach item="item" index="index" collection="AccountNOs" open="" separator="" close="">
					#{item}
					</foreach>
				</if>
				<if test = "AccountNOs.length >1 ">
				AND BALANCE.ACC_0 IN 
					<foreach item="item" index="index" collection="AccountNOs" open="(" separator="," close=")">
					#{item}
					</foreach>
				</if>
				<if test = " Year != '' ">
				AND FISCALYEAR.DESSHO_0 = #{Year}
				</if>
		) AS T1
	</select>
	
		
	<select id="findAccoutBalanceForAll" resultType="sageassistant.model.FinancialBalance">
		SELECT 
			T1.AccountNO,
			T1.Currency, 
			T1.Year,
			D0-C0 AS B0,
			D0+D1-C0-C1 AS B1,
			D0+D1+D2-C0-C1-C2 AS B2,
			D0+D1+D2+D3-C0-C1-C2-C3 AS B3,
			D0+D1+D2+D3+D4-C0-C1-C2-C3-C4 AS B4,
			D0+D1+D2+D3+D4+D5-C0-C1-C2-C3-C4-C5 AS B5,
			D0+D1+D2+D3+D4+D5+D6-C0-C1-C2-C3-C4-C5-C6 AS B6,
			D0+D1+D2+D3+D4+D5+D6+D7-C0-C1-C2-C3-C4-C5-C6-C7 AS B7,
			D0+D1+D2+D3+D4+D5+D6+D7+D8-C0-C1-C2-C3-C4-C5-C6-C7-C8 AS B8,
			D0+D1+D2+D3+D4+D5+D6+D7+D8+D9-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9 AS B9,
			D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10 AS B10,
			D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10+D11-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10-C11 AS B11,
			D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10+D11+D12-C0-C1-C2-C3-C4-C5-C6-C7-C8-C9-C10-C11-C12 AS B12,
			D0-C0 AS M0,
			D1-C1 AS M1,
			D2-C2 AS M2,
			D3-C3 AS M3,
			D4-C4 AS M4,
			D5-C5 AS M5,
			D6-C6 AS M6,
			D7-C7 AS M7,
			D8-C8 AS M8,
			D9-C9 AS M9,
			D10-C10 AS M10,
			D11-C11 AS M11,
			D12-C12 AS M12,
			T1.C0,
			T1.C1,
			T1.C2,
			T1.C3,
			T1.C4,
			T1.C5,
			T1.C6,
			T1.C7,
			T1.C8,
			T1.C9,
			T1.C10,
			T1.C11,
			T1.C12,
			T1.D0,
			T1.D1,
			T1.D2,
			T1.D3,
			T1.D4,
			T1.D5,
			T1.D6,
			T1.D7,
			T1.D8,
			T1.D9,
			T1.D10,
			T1.D11,
			T1.D12
		FROM (
		SELECT DISTINCT
				BALANCE.ACC_0 AS AccountNO,
				BALANCE.CUR_0 AS Currency,
				FISCALYEAR.DESSHO_0 AS Year,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_0) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D0,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_0) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_0) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C0,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_1) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D1,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_1) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_1) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C1,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_2) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D2,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_2) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_2) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C2,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_3) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D3,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_3) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_3) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C3,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_4) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D4,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_4) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_4) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C4,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_5) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D5,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_5) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_5) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C5,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_6) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D6,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_6) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_6) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C6,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_7) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D7,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_7) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_7) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C7,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_8) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D8,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_8) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_8) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C8,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_9) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D9,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_9) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_9) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C9,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_10) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D10,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_10) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_10) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C10,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_11) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D11,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_11) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_11) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C11,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(DEBLED_12) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(DEB_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS D12,
				IIF(BALANCE.CUR_0 = BALANCE.CURLED_0,
					SUM(CDTLED_12) OVER (PARTITION BY BALANCE.FIY_0),
					SUM(CDT_12) OVER (PARTITION BY BALANCE.FIY_0,BALANCE.CUR_0)) AS C12
		FROM BALANCE
		INNER JOIN FISCALYEAR 
				ON FISCALYEAR.FIYNUM_0 = BALANCE.FIY_0 
					AND BALANCE.CPY_0 = FISCALYEAR.CPY_0 
					AND BALANCE.LEDTYP_0 = FISCALYEAR.LEDTYP_0 
		WHERE 
			BALANCE.FCY_0=#{Site} 
				AND BALANCE.BPR_0=''
				<if test = " Year != '' ">
				AND FISCALYEAR.DESSHO_0 = #{Year}
				</if>
		) AS T1
	</select>

	<select id="findInvoicePay" resultType="sageassistant.model.FinancialInvoicePay">
	SELECT DISTINCT
        GACCDUDATE.FCY_0 AS Site,
        GACCDUDATE.BPR_0 AS Customer,
        BPCUSTOMER.BPCNAM_0 AS Name,
        GACCDUDATE.NUM_0 AS InvoiceNO,
        GACCDUDATE.CUR_0 AS Currency,
        SUM(GACCDUDATE.AMTCUR_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.CUR_0) AS Amount,
        SUM(GACCDUDATE.AMTLOC_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.AMTLOC_0) AS AmountLocal,
        SUM(GACCDUDATE.PAYCUR_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.CUR_0)AS Pay,
        SUM(GACCDUDATE.PAYLOC_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.PAYLOC_0)AS PayLocal,
        MIN(GACCDUDATE.CREDAT_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.CUR_0) AS CreateDate,
        MAX(GACCDUDATE.DUDDAT_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.CUR_0) AS DueDate,
        IIF(GACCDUDATE.PAYDAT_0 ='1753-01-01',NULL,GACCDUDATE.PAYDAT_0) AS PayDate,
        SINVOICE.YFAPIAO_0 AS Fapiao,
        ----- SOME NEW INVOICE WITHOUT SORDER AND CUSORDREF IS WRONG,
        ----- TO FIND THE OLD SORDER FROM MANUAL SET CUSORDREF
        IIF(SINVOICE.YSOHNUM_0 = '', SINVOICEV.INVREF_0,SORDER.CUSORDREF_0) AS CustRef,
        IIF(SINVOICE.YSOHNUM_0 = '', SORDEROLD.SOHNUM_0,SINVOICE.YSOHNUM_0) AS OrderNO,
        IIF(AMTCUR_0=PAYCUR_0,'Paid',IIF(AMTCUR_0>PAYCUR_0 AND PAYCUR_0 != 0,'P-Paid','U-Paid')) AS Status
    FROM EXPLOIT.GACCDUDATE GACCDUDATE
        LEFT JOIN EXPLOIT.BPCUSTOMER BPCUSTOMER
            ON BPCUSTOMER.BPCNUM_0 = GACCDUDATE.BPR_0
        LEFT JOIN EXPLOIT.SINVOICE SINVOICE
            ON SINVOICE.NUM_0 = GACCDUDATE.NUM_0
        LEFT JOIN EXPLOIT.SORDER SORDER
            ON SINVOICE.YSOHNUM_0 = SORDER.SOHNUM_0
        ----- SOME NEW INVOICE WITHOUT SORDER AND CUSORDREF IS WRONG,
        ----- TO FIND THE OLD SORDER FROM MANUAL SET CUSORDREF
        LEFT JOIN EXPLOIT.SINVOICEV SINVOICEV
            ON GACCDUDATE.NUM_0 = SINVOICEV.NUM_0
        LEFT JOIN EXPLOIT.SORDER SORDEROLD
            ON SORDEROLD.CUSORDREF_0 = SINVOICEV.INVREF_0
               AND SINVOICEV.INVREF_0 != ''
    WHERE 
        GACCDUDATE.FCY_0 = #{Site} 
        AND GACCDUDATE.TYP_0='FFC'
		<if test = " CustomerCode != '' ">
			AND GACCDUDATE.BPR_0 = #{CustomerCode}
		</if>
		AND
		(
		--CreateDate
		(GACCDUDATE.CREDAT_0 BETWEEN CONVERT(datetime, #{DateFrom},120) AND CONVERT(datetime, #{DateTo},120))
		--DueDate
		OR (GACCDUDATE.DUDDAT_0 BETWEEN CONVERT(datetime, #{DateFrom},120) AND CONVERT(datetime, #{DateTo},120))
		--PayDate
		OR (GACCDUDATE.PAYDAT_0 BETWEEN CONVERT(datetime, #{DateFrom},120) AND CONVERT(datetime, #{DateTo},120))
		)
	</select>

	<select id="findInvoicePayPro" resultType="sageassistant.model.FinancialInvoicePayPro">
		SELECT DISTINCT 
		GACCDUEHISTORY.Site,
		GACCDUEHISTORY.InvoiceNO,
		GACCDUEHISTORY.Currency,
		GACCDUEHISTORY.Amount,
		GACCDUEHISTORY.AmountLocal,
		GACCDUEHISTORY.Pay,
		GACCDUEHISTORY.PayLocal,
		GACCDUEHISTORY.CreateDate,
		GACCDUEHISTORY.DueDate,
		GACCDUEHISTORY.Fapiao,
		GACCDUEHISTORY.PayDate,
		GACCDUEHISTORY.Customer,
		GACCDUEHISTORY.CustRef,
		GACCDUEHISTORY.Name,
		GACCDUEHISTORY.OrderNO,
		GACCDUEHISTORY.Status,
		IIF(MATCHEDFCCR_A.PAYDAT_0 !='','FCCR_A',
		IIF(MATCHEDFCCR_M.PAYDAT_0 !='','FCCR_M',
		IIF(MATCHEDFCAC.PAYDAT_0 !='','FCAC',
		IIF(MATCHEDOD.PAYDAT_0 !='','FCODODCR','')))) AS MatchedBy,
	
		ISNULL(MATCHEDFCCR_A.ENTRYNO,
		ISNULL(MATCHEDFCCR_M.ENTRYNO,
		ISNULL(MATCHEDFCAC.ENTRYNO,MATCHEDOD.ENTRYNO))) AS PayNO,
	
		ISNULL(MATCHEDFCCR_A.CUR_0,
		ISNULL(MATCHEDFCCR_M.CUR_0,
		ISNULL(MATCHEDFCAC.CUR_0,MATCHEDOD.CUR_0))) AS PayCurrency,
	
		ISNULL(MATCHEDFCCR_A.AMTCUR_0,
		ISNULL(MATCHEDFCCR_M.AMTCUR_0,
		ISNULL(MATCHEDFCAC.AMTCUR_0,MATCHEDOD.AMTCUR_0))) AS PayInPayNO,
	
		ISNULL(MATCHEDFCCR_A.DES_0,
		ISNULL(MATCHEDFCCR_M.DES_0,
		ISNULL(MATCHEDFCAC.DES_0,MATCHEDOD.DES_0))) AS Desc0,
	
		ISNULL(MATCHEDFCCR_A.REFINTLIN_0,
		ISNULL(MATCHEDFCCR_M.REFINTLIN_0,
		ISNULL(MATCHEDFCAC.REFINTLIN_0,MATCHEDOD.REFINTLIN_0))) AS Desc1
	FROM 
		(SELECT DISTINCT
			GACCDUDATE.FCY_0 AS Site,
			GACCDUDATE.BPR_0 AS Customer,
			BPCUSTOMER.BPCNAM_0 AS Name,
			GACCDUDATE.NUM_0 AS InvoiceNO,
			GACCDUDATE.CUR_0 AS Currency,
			SUM(GACCDUDATE.AMTCUR_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.CUR_0) AS Amount,
			SUM(GACCDUDATE.AMTLOC_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.AMTLOC_0) AS AmountLocal,
			SUM(GACCDUDATE.PAYCUR_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.CUR_0)AS Pay,
			SUM(GACCDUDATE.PAYLOC_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.PAYLOC_0)AS PayLocal,
			MIN(GACCDUDATE.CREDAT_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.CUR_0) AS CreateDate,
			MAX(GACCDUDATE.DUDDAT_0) OVER (PARTITION BY GACCDUDATE.NUM_0, GACCDUDATE.CUR_0) AS DueDate,
			IIF(GACCDUDATE.PAYDAT_0 ='1753-01-01',NULL,GACCDUDATE.PAYDAT_0) AS PayDate,
			SINVOICE.YFAPIAO_0 AS Fapiao,
			----- SOME NEW INVOICE WITHOUT SORDER AND CUSORDREF IS WRONG,
			----- TO FIND THE OLD SORDER FROM MANUAL SET CUSORDREF
			IIF(SINVOICE.YSOHNUM_0 = '', SINVOICEV.INVREF_0,SORDER.CUSORDREF_0) AS CustRef,
			IIF(SINVOICE.YSOHNUM_0 = '', SORDEROLD.SOHNUM_0,SINVOICE.YSOHNUM_0) AS OrderNO,
			IIF(AMTCUR_0=PAYCUR_0,'Paid',IIF(AMTCUR_0>PAYCUR_0 AND PAYCUR_0 != 0,'P-Paid','U-Paid')) AS Status
		FROM EXPLOIT.GACCDUDATE GACCDUDATE
			LEFT JOIN EXPLOIT.BPCUSTOMER BPCUSTOMER
				ON BPCUSTOMER.BPCNUM_0 = GACCDUDATE.BPR_0
			LEFT JOIN EXPLOIT.SINVOICE SINVOICE
				ON SINVOICE.NUM_0 = GACCDUDATE.NUM_0
			LEFT JOIN EXPLOIT.SORDER SORDER
				ON SINVOICE.YSOHNUM_0 = SORDER.SOHNUM_0
			----- SOME NEW INVOICE WITHOUT SORDER AND CUSORDREF IS WRONG,
			----- TO FIND THE OLD SORDER FROM MANUAL SET CUSORDREF
			LEFT JOIN EXPLOIT.SINVOICEV SINVOICEV
				ON GACCDUDATE.NUM_0 = SINVOICEV.NUM_0
			LEFT JOIN EXPLOIT.SORDER SORDEROLD
				ON SORDEROLD.CUSORDREF_0 = SINVOICEV.INVREF_0
				   AND SINVOICEV.INVREF_0 != ''
		WHERE 
			GACCDUDATE.FCY_0 = 'ZHU' 
			AND GACCDUDATE.TYP_0='FFC'
		) AS GACCDUEHISTORY  --- Main due list
		LEFT JOIN
		(SELECT DISTINCT 
			PAYMENTD.VCRNUM_0 AS INVOICENO,
			GACCENTRYD.NUM_0 AS ENTRYNO,
			GACCENTRYD.ACCDAT_0 AS PAYDAT_0,
			GACCENTRYD.CUR_0,
			GACCENTRYD.AMTCUR_0,
			GACCENTRYD.DES_0 + ' ' + GACCENTRYD.YDES_0 AS DES_0,
			GACCENTRYD.REFINTLIN_0
		FROM EXPLOIT.GACCENTRYD GACCENTRYD
			INNER JOIN EXPLOIT.PAYMENTD PAYMENTD
				ON  PAYMENTD.NUM_0 = REPLACE(GACCENTRYD.REFINTLIN_0,'PYH ','')
		WHERE 
			PAYMENTD.FCYLIN_0='ZHU'
			AND (PAYMENTD.VCRTYP_0 = 'FFC' OR PAYMENTD.VCRTYP_0 = '') --Most are FFC for Invoice, few are empty for SOrder 
			AND GACCENTRYD.FCYLIN_0='ZHU'
			AND GACCENTRYD.TYP_0 = 'FCR'
			AND GACCENTRYD.MTC_0 !=''
			AND GACCENTRYD.REFINTLIN_0 !='' --A with PYH XXXXX
		) AS MATCHEDFCCR_A      -- Matched FCCR auto
		  ON (
			 GACCDUEHISTORY.InvoiceNO =  MATCHEDFCCR_A.INVOICENO
			 OR GACCDUEHISTORY.OrderNO =  MATCHEDFCCR_A.INVOICENO
			 )
			 AND GACCDUEHISTORY.Pay !=0
		LEFT JOIN
		(SELECT DISTINCT
			GACCENTRYDFC.NUM_0 AS INVOICENO,
			GACCENTRYDRC.NUM_0 AS ENTRYNO,
			GACCENTRYDRC.ACCDAT_0 AS PAYDAT_0,
			GACCENTRYDRC.CUR_0,
			GACCENTRYDRC.AMTCUR_0,
			GACCENTRYDRC.DES_0 + ' ' + GACCENTRYDRC.YDES_0 AS DES_0,
			GACCENTRYDRC.REFINTLIN_0
		FROM EXPLOIT.GACCENTRYD GACCENTRYDFC
		   INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYDRC
				 ON GACCENTRYDFC.MTC_0 = GACCENTRYDRC.MTC_0
				   AND GACCENTRYDFC.BPR_0 = GACCENTRYDRC.BPR_0
				   AND GACCENTRYDFC.ACC_0 = GACCENTRYDRC.ACC_0
		WHERE 
		   GACCENTRYDFC.FCYLIN_0='ZHU'
		   AND GACCENTRYDFC.TYP_0 = 'FFC'
		   AND GACCENTRYDFC.BPR_0 !=''
		   AND GACCENTRYDFC.MTC_0 !=''
		   AND GACCENTRYDRC.FCYLIN_0='ZHU'
		   AND GACCENTRYDRC.TYP_0 = 'FCR'
		   AND GACCENTRYDRC.BPR_0 !=''
		   AND GACCENTRYDRC.MTC_0 !=''
		   AND GACCENTRYDRC.REFINTLIN_0 = ''  --M without PYH XXXXX
		) AS MATCHEDFCCR_M      -- Matched FCCR manual
		  ON GACCDUEHISTORY.InvoiceNO =  MATCHEDFCCR_M.INVOICENO
			 AND GACCDUEHISTORY.Pay !=0
			LEFT JOIN
		(SELECT
			GACCENTRYDFC.NUM_0 AS INVOICENO,
			GACCENTRYDAC.NUM_0 AS ENTRYNO,
			GACCENTRYDAC.ACCDAT_0 AS PAYDAT_0,
			GACCENTRYDAC.CUR_0,
			GACCENTRYDAC.AMTCUR_0,
			GACCENTRYDAC.DES_0 + ' ' + GACCENTRYDAC.YDES_0 AS DES_0,
			GACCENTRYDAC.REFINTLIN_0
		FROM EXPLOIT.GACCENTRYD GACCENTRYDFC
		   INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYDAC
				 ON GACCENTRYDFC.MTC_0 = GACCENTRYDAC.MTC_0
				   AND GACCENTRYDFC.BPR_0 = GACCENTRYDAC.BPR_0
				   AND GACCENTRYDFC.ACC_0 = GACCENTRYDAC.ACC_0
		WHERE 
		   GACCENTRYDFC.FCYLIN_0='ZHU'
		   AND GACCENTRYDFC.TYP_0 = 'FFC'
		   AND GACCENTRYDFC.BPR_0 !=''
		   AND GACCENTRYDFC.MTC_0 !=''
		   AND GACCENTRYDAC.FCYLIN_0='ZHU'
		   AND GACCENTRYDAC.TYP_0 = 'FAC'
		   AND GACCENTRYDAC.BPR_0 !=''
		   AND GACCENTRYDAC.MTC_0 !=''
		   AND GACCENTRYDAC.REFINTLIN_0 = ''
		) AS MATCHEDFCAC      -- Matched FCAC
		  ON GACCDUEHISTORY.InvoiceNO =  MATCHEDFCAC.INVOICENO
			 AND GACCDUEHISTORY.Pay !=0
		LEFT JOIN
			(
			   SELECT DISTINCT 
				   GACCENTRYDFC.NUM_0 AS INVOICENO,
				   GACCENTRYDRC.NUM_0 AS ENTRYNO,
				   GACCENTRYDRC.ACCDAT_0 AS PAYDAT_0,
				   GACCENTRYDRC.CUR_0,
				   GACCENTRYDRC.AMTCUR_0,
				   GACCENTRYDRC.DES_0 + ' ' + GACCENTRYDRC.YDES_0 AS DES_0,
				   GACCENTRYDRC.REFINTLIN_0
				FROM EXPLOIT.GACCENTRYD GACCENTRYDFC
					INNER JOIN EXPLOIT.GACCENTRYD GACCENTRYDOD
						ON  GACCENTRYDFC.MTC_0 =  GACCENTRYDOD.MTC_0
							AND GACCENTRYDFC.ACC_0 =  GACCENTRYDOD.ACC_0
							AND GACCENTRYDFC.SAC_0 =  GACCENTRYDOD.SAC_0
							AND GACCENTRYDFC.BPR_0 =  GACCENTRYDOD.BPR_0
							AND GACCENTRYDFC.CUR_0 =  GACCENTRYDOD.CUR_0
							----FC OD reverse, FC many to OD many
							AND GACCENTRYDFC.SNS_0 =  GACCENTRYDOD.SNS_0*-1
					LEFT JOIN EXPLOIT.GACCENTRYD GACCENTRYDOD2
						ON  GACCENTRYDOD2.NUM_0 =  GACCENTRYDOD.NUM_0
							AND (
								GACCENTRYDOD.AMTCUR_0=GACCENTRYDOD2.AMTCUR_0
								OR GACCENTRYDOD.AMTCUR_0=GACCENTRYDOD2.AMTCUR_0*-1
								)
							AND GACCENTRYDOD2.CUR_0 =  GACCENTRYDOD.CUR_0
							AND GACCENTRYDOD2.DES_0 =  GACCENTRYDOD.DES_0
							AND GACCENTRYDOD2.MTC_0 !=''
							AND GACCENTRYDOD2.BPR_0 =''
					LEFT JOIN EXPLOIT.GACCENTRYD GACCENTRYDRC
						ON GACCENTRYDOD2.ACC_0 = GACCENTRYDRC.ACC_0
							AND GACCENTRYDOD2.MTC_0 = GACCENTRYDRC.MTC_0
							AND GACCENTRYDOD2.CUR_0 = GACCENTRYDRC.CUR_0
							AND GACCENTRYDOD2.AMTCUR_0=GACCENTRYDRC.AMTCUR_0
			   WHERE 
				 GACCENTRYDFC.FCYLIN_0='ZHU'
				 AND GACCENTRYDFC.TYP_0 = 'FFC'
				 AND GACCENTRYDFC.REFINTLIN_0 = ''
				 AND GACCENTRYDFC.MTC_0 !=''
				 AND GACCENTRYDOD.FCYLIN_0='ZHU'
				 AND GACCENTRYDOD.TYP_0 = 'FOD'
				 AND GACCENTRYDOD.REFINTLIN_0 = ''
				 AND GACCENTRYDOD.MTC_0 !=''
				 AND GACCENTRYDOD2.FCYLIN_0='ZHU'
				 AND GACCENTRYDOD2.TYP_0 = 'FOD'
				 AND GACCENTRYDOD2.REFINTLIN_0 = ''
				 AND GACCENTRYDOD2.MTC_0 !=''
				 AND GACCENTRYDRC.FCYLIN_0='ZHU'
				 AND GACCENTRYDRC.TYP_0 = 'FCR'
			) AS MATCHEDOD       -- Martched OD
			ON GACCDUEHISTORY.InvoiceNO = MATCHEDOD.INVOICENO
	WHERE 
	   GACCDUEHISTORY.Site = #{Site} 
	   <if test = " CustomerCode != '' ">
		AND GACCDUEHISTORY.Customer = #{CustomerCode}
	   </if>
		AND
		(
		--CreateDate
		(GACCDUEHISTORY.CreateDate BETWEEN CONVERT(datetime, #{DateFrom},120) AND CONVERT(datetime, #{DateTo},120))
		--DueDate
		OR (GACCDUEHISTORY.DueDate BETWEEN CONVERT(datetime, #{DateFrom},120) AND CONVERT(datetime, #{DateTo},120))
		--PayDate
		OR (GACCDUEHISTORY.PayDate BETWEEN CONVERT(datetime, #{DateFrom},120) AND CONVERT(datetime, #{DateTo},120))
		)
	ORDER BY
		GACCDUEHISTORY.InvoiceNO ASC,
		GACCDUEHISTORY.CreateDate ASC,
		GACCDUEHISTORY.DueDate ASC
	</select>
</mapper>