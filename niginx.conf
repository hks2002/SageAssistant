# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

#user  nobody;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include /etc/nginx/conf.d/*.conf;
    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    
    # static first, gzip files if no .gz static files.
    gzip_static  on;
    gzip_proxied expired no-cache no-store private auth;
    gzip on; 
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types text/plain application/javascript text/css application/xml application/json font/woff font/woff2 image/x-icon image/svg+xml;
    gzip_vary on;

    
    # $remote_user $http_referer "$http_user_agent" "$http_x_forwarded_for"  "$http_user_agent"
    log_format  main  '[$year-$month-$day $hour:$minutes:$seconds] [$remote_addr] $status $upstream_cache_status "$request"';
    access_log  /var/log/nginx/access.log  main;
    
    
    # To client
    add_header Access-Control-Allow-Origin          *;
    add_header 'Access-Control-Allow-Methods'       'GET,POST,PUT,OPTIONS';
    add_header 'Access-Control-Allow-Headers'       'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
    add_header  X-Cache                             $upstream_cache_status;

    
    # To real server
    # $http_upgrade could be TLS1.0/1.1 .. OR Websocket, when upgraded, Connection must be 'upgrade'
    proxy_http_version   1.1;
    proxy_set_header     Upgrade         $http_upgrade;
    proxy_set_header     Connection      upgrade;
    
    proxy_set_header     Host            $host;
    proxy_set_header     Remote-Host     $remote_addr;
    proxy_set_header     X-Real-IP       $remote_addr;
    proxy_set_header     X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header     Cookie          $http_cookie;
    
    proxy_connect_timeout 600;
    proxy_send_timeout    600;
    proxy_read_timeout    600;
    send_timeout           25;

       
    # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path 
    # static file with cookies cache doesn't work, must remove it
    proxy_cache_path                 /var/lib/nginx/tmp keys_zone=mycache:100m inactive=1d;  
    proxy_cache_valid                200 206 304 301 302 1d;
    proxy_cache_valid                404                 1m;
    proxy_cache_valid                any                 5m;
    proxy_cache_key                  $host$request_uri;
    proxy_cache_background_update    on;
    proxy_cache_methods              GET POST HEAD;
    proxy_max_temp_file_size 0;
    
    # Upstream
    upstream srvsage {
        server 192.168.10.62:443;
        keepalive 4;
    }
    
    server {
        # Add http2 support, http2 needs ssl;
        listen          443 ssl http2;
        listen          80;
        
        ssl_certificate             "/etc/ssl/sageassistant.crt";
        ssl_certificate_key         "/etc/ssl/sageassistant.key";
        ssl_session_cache           shared:SSL:1m;
        ssl_session_timeout         10m;
        ssl_ciphers                 HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers   on;

        if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})")
        {
            set $year       $1;
            set $month      $2;
            set $day        $3;
            set $hour       $4;
            set $minutes    $5;
            set $seconds    $6;
        }
        
        root         /usr/share/nginx/html;
        
        
        location / {
            if ( $server_port = 80 ) {
               rewrite ^(.*) https://192.168.10.12:443 permanent;
            }
        }
        
        # srvsyr api service
        location ~ ^/(auth|api1|sdata|trans|logout) {
           proxy_pass           https://srvsage; #srvsage is upsteam name
        }
        
        location ~ ^/(print) {
           proxy_hide_header 'Content-Disposition';
           set               $isinline                0;
           if ($arg_disposition = "inline" ) {
              add_header        'Content-Disposition' 'inline; filename="$arg_filename"';
              set               $isinline             1;
           }
           if ($isinline = 0 ) {
             add_header        'Content-Disposition' 'attachment; filename="$arg_filename"';
           }
           # must have rewrite, otherwise disposition doesn't work
           # /print/xxx/filename.pdf
           rewrite ^/(print)/$report(.*)/(.*) /$1/$2;
           
           proxy_pass           https://srvsage; #srvsage is upsteam name
        }
        
        location ^~ /Data/ {
           proxy_pass           http://localhost:8080/data-srv;
        }

        location ^~ /Report/ {
           proxy_pass           http://localhost:8080/rpt-srv;
        }
        
        location ^~ /Fapiao/ {
           proxy_pass           http://localhost:8080/fapiao-srv;
        }

        location ^~ /File/ {
           rewrite '(^/File)/(.*)' /mnt/$2;
        }

        location ^~ /mnt/Drawing/ {
               root /;
        }
       
        location ^~ /mnt/Manual/ {
           root /;
        }
        
        error_page 404 /404.html;
           location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
           location = /50x.html {
        }
        
    }

}
